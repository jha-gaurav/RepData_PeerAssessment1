date()
q()
utils:::menuInstallPkgs()
q()
q()
install.packages("Rcpp")
q()
getwd()
q()
getwd()
q()
library(plyr)
install.packages("plyr")
library(dplyr)
library(plyr)
library(dplyr)
library(randomForest)
data <- iris
glimpse(data)
#cross validation, using rf to predict sepal.length
k = 5
data$id <- sample(1:k, nrow(data), replace = TRUE)
list <- 1:k
# prediction and test set data frames that we add to with each iteration over
# the folds
prediction <- data.frame()
testsetCopy <- data.frame()
#Creating a progress bar to know the status of CV
progress.bar <- create_progress_bar("text")
progress.bar$init(k)
#function for k fold
for(i in 1:k){
# remove rows with id i from dataframe to create training set
# select rows with id i to create test set
trainingset <- subset(data, id %in% list[-i])
testset <- subset(data, id %in% c(i))
#run a random forest model
mymodel <- randomForest(trainingset$Sepal.Length ~ ., data = trainingset, ntree = 100)
#remove response column 1, Sepal.Length
temp <- as.data.frame(predict(mymodel, testset[,-1]))
# append this iteration's predictions to the end of the prediction data frame
prediction <- rbind(prediction, temp)
# append this iteration's test set to the test set copy data frame
# keep only the Sepal Length Column
testsetCopy <- rbind(testsetCopy, as.data.frame(testset[,1]))
progress.bar$step()
}
# add predictions and actual Sepal Length values
result <- cbind(prediction, testsetCopy[, 1])
names(result) <- c("Predicted", "Actual")
result$Difference <- abs(result$Actual - result$Predicted)
# As an example use Mean Absolute Error as Evalution
summary(result$Difference)
q()
q()
q()
utils:::menuInstallPkgs()
library("ggplot2")
version
q()
library("ggplot2")
q()
install.packages(c("ggplot2", "plyr", "dplyr"))
install.packages("animation")
x = runif(50)
y = runif(50)
data = cbind(x,y)
plot(data)
km <- kmeans(data,4)
library(animation)
km1 <- kmeans.ani(data,3)
library(NLP)
library(tm)
library(slam)
library(dplyr)
library(animation)
library(wordcloud)
install.packages(c("NLP", "tm", "slam", "wordcloud"))
q()
q()
clear
q()
q()
install.packages("KernSmooth")
load(KernSmooth)
load(KernSmooth)
install.packages("KernSmooth")
load(kernapply())
load(kernapply
)
load(kernel)
install.packages("KernSmooth")
KernSmooth
library(KernSmooth)
install.packages("devtools")
rtools()
search(rtools)
find_rtools()
library(devtools)
find_rtools()
q()
library(datasets)
data("iris")
str(iris)
?split
split(iris, iris$Species, drop = FALSE)
groups <- split(iris, iris$Species, drop = FALSE)
class(groups)
?lapply
lapply(groups, mean)
lapply(groups[[3]], mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
str(mtcars)
table(mtcars$cyl)
?with
laply(mtcars, mean)
lapply(mtcars, mean)
aply(mtcars, 2, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
str(mtcars)
cars_hp <- split(mtcars, mtcars$hp, drop = FALSE)
cars_hp
cars_hp[[1]]
cars_hp <- split(mtcars, mtcars$cyl, drop = FALSE)
cars_hp
cars_hp[[1]]
lapply(groups[[3]], mean)
hp_4 <- sapply(cars_hp[[1]], mean)
hp_4
hp_4[4]
hp_8 <- saply(cars_hp[[3]], mean)
hp_8 <- sapply(cars_hp[[3]], mean)
hp_8
hp_8[[4]]
abs(hp_8[[4]] - hp_4[[4]])
debug(ls)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
abs(hp_8[[4]] - hp_4[[4]])
recover
recover
stop
exit
q
trace
traceback
q()
1
1
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
q()
library(MASS)
?ginv
q()
library('httr')
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
myapp <- oauth_app("github", key = "b5c64130b59be7ea17d4", secret = "8e69096f8d5b023da2e66513f267d38ff326cc4e")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(hhtpuv)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req <- GET("https://api.github.com/rate_limit", gtoken)
content(req)
q()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "b5c64130b59be7ea17d4", secret = "8e69096f8d5b023da2e66513f267d38ff326cc4e")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("github", key = "56b637a5baffac62cad9",  secret = "8964aab9e35c17dd297a15a2743f68530495b004")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
rm(list = ls())
oauth_endpoints("github")
rm(list = ls())
install.packages("httpuv")
install.packages("jsonlite")
library("httr")
library("httpuv")
oauth_endpoints("github")
myapp <- oauth_app("Coursera Application Course3Quiz2", key = "0b234b4c74c3be5b811a",  secret = "db29cb13d8c46fbb3592604b95079f90700ee0d4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
content(req[[1]])
content(req)
content(req[[1]][1])
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
output[[1]]
output[1]
options(max.print=1000000)
content(req)
list(output[[1]]$created_at)
list(output[[2]]$created_at)
list(output[[3]]$created_at)
class(output)
length(output)
output[[1]][[1]]
output[[1]]
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
output <- content(req)
output[[1]]
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
output <- content(req)
output[[1]]
for (i in 1:30) print(output[[i]]$created_at)
list(output[[5]]$name, output[[5]]$created_at)
list(output[11]]$name, output[11]]$created_at)
list(output[[11]]$name, output[[11]]$created_at)
q()
install.packages("installr")
q()
q()
install.packages("ggplot2")
setwd("F:/Coursera/Course5/test-repo/RepData_PeerAssessment1")
q()
